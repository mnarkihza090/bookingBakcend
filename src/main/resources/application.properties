analyse the repo 
take you time than give me the configurations  to adjust and set up like JWT secret etc  in the applications.propreties
Thought for 10s
I'll start by scanning the repository for configuration files and property usages (JWT, database, mail, storage, etc.). Then I'll extract the relevant keys and draft an application.properties template.

Searched 5 times and thought for 10s
I'll list the repo structure and look for build files and Java resources to identify if it's a Spring Boot project and where configurations would live.

Searched 4 times and listed 116 items in current directory and thought for 15s
I'll scan key files and search the codebase for property usages (JWT, mail, storage, payments) to derive the required application.properties keys.

Read application.properties and pom.xml and searched 3 times and thought for 15s
I'll scan key classes for property usages (JWT, uploads, email, security) and search for other config hooks (Twilio, payments, CORS).

Read 7 files and searched 6 times and thought for 98s
I scanned the codebase and located all property-driven settings. Your src/main/resources/application.properties exists but is empty; the app expects several keys (JWT, uploads, DB, mail).

What you need to configure
JWT: jwt.secret, jwt.expiration
Uploads: upload.dir (directory where files are stored)
Database (MySQL): spring.datasource.*, spring.jpa.*
Mail (SMTP): spring.mail.*
Optional: server.port, multipart upload limits, logging levels
Where these are used (code references)
    @Value("${jwt.secret}")
    private String SECRET_KEY;
    @Value("${jwt.expiration}")
    private long EXPIRATION_TIME;

    public JwtProvider(@Value("${jwt.secret}") String secretKey,@Value("${jwt.expiration}") long expirationTime) {
        SECRET_KEY = secretKey;
        EXPIRATION_TIME = expirationTime;
    }
                .setExpiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME))
                .signWith(SignatureAlgorithm.HS512, SECRET_KEY)
                .compact();
    public FileStorageServiceImpl(@Value("${upload.dir}") String uploadDir) throws Exception {
        this.fileLocation = Paths.get(uploadDir).toAbsolutePath().normalize();

        try {
            Files.createDirectories(this.fileLocation.resolve("users"));
            Files.createDirectories(this.fileLocation.resolve("tours"));
            Files.createDirectories(this.fileLocation.resolve("packages"));
            Files.createDirectories(this.fileLocation.resolve("hotels"));
        } catch (Exception e) {
            throw new Exception("Could not create directory");
        }
    }
    public void addResourceHandlers(ResourceHandlerRegistry registry) {
        registry.addResourceHandler("/uploads/**")
                .addResourceLocations("file:uploads/")
                .addResourceLocations("classpath:/static/");
    }

    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**")
                .allowedOrigins("http://localhost:4200")
                .allowedMethods("GET", "POST", "PUT", "DELETE","OPTIONS")
                .allowedHeaders("*")
                .allowCredentials(true);
    }
        String confirmationLink = "http://localhost:8080/api/auth/verify?token=" + token;

        String mailContent = "<p> Dear " +user.getUsername() + ", </p>";
        mailContent += "<p>Please click the link below to verify your email </p>";
        mailContent += "<h3><a href=\"" + confirmationLink + "\">VERIFY</a></h3>";
        mailContent += "<p>Thank you <br> M-Travel </p>";

        try {
            MimeMessage mimeMessage = javaMailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(mimeMessage);

            helper.setFrom("admin@mtravel.com",senderName);
            helper.setTo(user.getEmail());
            helper.setSubject(subject);
            helper.setText(mailContent,true);
application.properties template (fill these in)
# Server
server.port=8080

# Database (MySQL)
spring.datasource.url=jdbc:mysql://localhost:3306/travelapp?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
spring.datasource.username=YOUR_DB_USERNAME
spring.datasource.password=YOUR_DB_PASSWORD
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA / Hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.open-in-view=false

# JWT
jwt.secret=CHANGE_ME_TO_A_LONG_RANDOM_SECRET_AT_LEAST_32_CHARS
jwt.expiration=86400000  # 1 day in ms

# File uploads
upload.dir=uploads
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# Mail (SMTP)
spring.mail.host=smtp.example.com
spring.mail.port=587
spring.mail.username=YOUR_SMTP_USERNAME
spring.mail.password=YOUR_SMTP_PASSWORD
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.default-encoding=UTF-8
spring.mail.test-connection=false

# Logging (optional)
logging.level.root=INFO
logging.level.com.example.travelapp=DEBUG
# logging.level.org.springframework.security=DEBUG
